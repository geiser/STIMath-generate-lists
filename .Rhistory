library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
colnames(irt.params)
irt.params
rowname(irt.params)
rowname(irt.params)
row.name(irt.params)
row.names(irt.params)
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
data.frame("problem_id"=row.names(irt.params), irt.params)
library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
coef(md, simplify = T)$items
library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), "irt-params.csv")
gc()
library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
coef(md, simplify = T)
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), "irt-params.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), "irt-params.csv")
library(readr)
irt.params <- read_csv("irt-params.csv")
library(readr)
irt.params <- read_csv("irt-params.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
library(readr)
irt.params <- read_csv("irt-params.csv")
library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), "irt-params.csv")
c(fscores(md))
fscores(md)
1:nrow(dat)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), "irt-params.csv")
as.data.frame("user_id"=paste0('s',1:nrow(dat)), F1= c(fscores(md)))
data.frame("user_id"=paste0('s',1:nrow(dat)), F1= c(fscores(md)))
library(mirt)
library(readr)
dat <- read_csv("dat.csv")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), "irt-params.csv")
write_csv(data.frame("user_id"=paste0('s',1:nrow(dat)), F1= c(fscores(md))), "tetha.csv")
library(readr)
irt.params <- read_csv("irt-params.csv")
theta <- c(read_csv("irt-params.csv")$F1) # habilidades estimadas mediante 3PL da TRI
l.theta <- sort(theta, index.return=T) # ordenar as habilididades estimadas
l.theta
irt.params <- read_csv("irt-params.csv")
theta <- c(read_csv("irt-params.csv")$F1) # habilidades estimadas mediante 3PL da TRI
read_csv("irt-params.csv")$F1
read_csv("irt-params.csv")
irt.params <- read_csv("irt-params.csv")
theta <- c(read_csv("tetha.csv")$F1) # habilidades estimadas mediante 3PL da TRI
l.theta <- sort(theta, index.return=T) # ordenar as habilididades estimadas
n.list = 3
df.combn <- combn(1:length(theta), n.list-1)
df.combn <- rbind(df.combn, rep(length(theta), ncol(df.combn)))
min_j <- 0 # indices da partição com menor soma de desvios
min_sum_sqr_dev <- Inf
for (j in 1:ncol(df.combn)) {
idx = 1
sum_sqr_dev = 0
for (i in 1:n.list) {
x <- l.theta$x[idx:df.combn[i,j]]
sum_sqr_dev <- sum_sqr_dev + sum((x - mean(x))^2)
idx <- df.combn[i,j] + 1
}
if (!is.na(sum_sqr_dev) & (sum_sqr_dev < min_sum_sqr_dev)) {
min_j <- j
min_sum_sqr_dev <- sum_sqr_dev
}
}
idx = 1
m.abilities <- c()
for (i in 1:n.list) {
m <- mean(l.theta$x[idx:df.combn[i,min_j]])
m.abilities <- c(m.abilities, m)
idx <- df.combn[i,min_j] + 1
}
(theta <- m.abilities) # media das habilidades das partições
for (s in 1:length(theta)) {
l.iff <- c()
l.seq <- c()
for (i in 1:nrow(irt.params)) {
a <- irt.params$a1[i]
b <- irt.params$d[i]
c <- irt.params$g[i]
p <- c+((1-c)/(1+exp(-a*(theta[s]-b))))
if (p < 0.85) { # itens com mais de 85% de acertados não são parte da lista
iff <- (a^2)*((((p-c)^2)*(1-p))/(((1-c)^2)*p))
l.iff <- c(l.iff, iff)
l.seq <- c(l.seq, paste0('Q',i))
}
}
if (length(l.iff) > 0) {
l.iff <- sort(l.iff, index.return = T)
print(l.seq[l.iff$ix])
} else {
print("empty list")
}
}
library(readr)
source('bkt.R')
irt.params <- read_csv("item-params.csv")
log <- read_csv("log.csv")
k = 'EF02MA06A'
user_ids = c('s1','s2','s3','s4','s5','s6','s7','s8','s9','s10')
question_ids = c('Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9')
p.learn <- sapply(user_ids, FUN = function(u) {
# estimar as probabilidade das habilidades aprendidas mediante BKT
bkt.learn(log, u, k, 1/16, irt.params = irt.params)
})
l.learn <- sort(p.learn, index.return=T) # ordenar as probabilidades
n.list <- 3
df.combn <- combn(1:length(p.learn), n.list-1)
df.combn <- rbind(df.combn, rep(length(p.learn), ncol(df.combn)))
min_j <- 0 # indices da partição com menor soma de desvios
min_sum_sqr_dev <- Inf
for (j in 1:ncol(df.combn)) {
idx = 1
sum_sqr_dev = 0
for (i in 1:n.list) {
x <- l.learn$x[idx:df.combn[i,j]]
sum_sqr_dev <- sum_sqr_dev + sum((x - mean(x))^2)
idx <- df.combn[i,j] + 1
}
if (!is.na(sum_sqr_dev) & (sum_sqr_dev < min_sum_sqr_dev)) {
min_j <- j
min_sum_sqr_dev <- sum_sqr_dev
}
}
idx = 1
m.learns <- c()
for (i in 1:n.list) {
print(paste0('grupo ',i,': ')); print(l.learn$x[idx:df.combn[i,min_j]]) # grupo de estudantes
m <- mean(l.learn$x[idx:df.combn[i,min_j]])
m.learns <- c(m.learns, m)
idx <- df.combn[i,min_j] + 1
}
(p.learn <- m.learns) # media das probabilidades de aprender "k"
for (s in 1:length(p.learn)) {
l.iff <- c()
l.seq <- c()
for (i in 1:length(question_ids)) {
a <- irt.params$a1[which(irt.params$problem_id == question_ids[i])]
b <- irt.params$d[which(irt.params$problem_id == question_ids[i])]
c <- irt.params$g[which(irt.params$problem_id == question_ids[i])]
p <- bkt.predict(p.learn[s], p.guess = c)
if (p < 0.85) { # itens com mais de 85% de acertados não são parte da lista
iff <- (a^2)*((((p-c)^2)*(1-p))/(((1-c)^2)*p))
l.iff <- c(l.iff, iff)
l.seq <- c(l.seq, question_ids[i])
}
}
if (length(l.iff) > 0) {
l.iff <- sort(l.iff, index.return = T)
print(l.seq[l.iff$ix])
} else {
print("empty list")
}
}
library(readr)
source('bkt.R')
irt.params <- read_csv("item-params.csv")
irt.params
irt.params <- read_csv("item-params.csv")
irt.params <- read_csv("irt-params.csv")
log <- read_csv("log.csv")
k = 'EF02MA06A'
user_ids = c('s1','s2','s3','s4','s5','s6','s7','s8','s9','s10')
question_ids = c('Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9')
p.learn <- sapply(user_ids, FUN = function(u) {
# estimar as probabilidade das habilidades aprendidas mediante BKT
bkt.learn(log, u, k, 1/16, irt.params = irt.params)
})
l.learn <- sort(p.learn, index.return=T) # ordenar as probabilidades
n.list <- 3
df.combn <- combn(1:length(p.learn), n.list-1)
df.combn <- rbind(df.combn, rep(length(p.learn), ncol(df.combn)))
min_j <- 0 # indices da partição com menor soma de desvios
min_sum_sqr_dev <- Inf
for (j in 1:ncol(df.combn)) {
idx = 1
sum_sqr_dev = 0
for (i in 1:n.list) {
x <- l.learn$x[idx:df.combn[i,j]]
sum_sqr_dev <- sum_sqr_dev + sum((x - mean(x))^2)
idx <- df.combn[i,j] + 1
}
if (!is.na(sum_sqr_dev) & (sum_sqr_dev < min_sum_sqr_dev)) {
min_j <- j
min_sum_sqr_dev <- sum_sqr_dev
}
}
idx = 1
m.learns <- c()
for (i in 1:n.list) {
print(paste0('grupo ',i,': ')); print(l.learn$x[idx:df.combn[i,min_j]]) # grupo de estudantes
m <- mean(l.learn$x[idx:df.combn[i,min_j]])
m.learns <- c(m.learns, m)
idx <- df.combn[i,min_j] + 1
}
(p.learn <- m.learns) # media das probabilidades de aprender "k"
for (s in 1:length(p.learn)) {
l.iff <- c()
l.seq <- c()
for (i in 1:length(question_ids)) {
a <- irt.params$a1[which(irt.params$problem_id == question_ids[i])]
b <- irt.params$d[which(irt.params$problem_id == question_ids[i])]
c <- irt.params$g[which(irt.params$problem_id == question_ids[i])]
p <- bkt.predict(p.learn[s], p.guess = c)
if (p < 0.85) { # itens com mais de 85% de acertados não são parte da lista
iff <- (a^2)*((((p-c)^2)*(1-p))/(((1-c)^2)*p))
l.iff <- c(l.iff, iff)
l.seq <- c(l.seq, question_ids[i])
}
}
if (length(l.iff) > 0) {
l.iff <- sort(l.iff, index.return = T)
print(l.seq[l.iff$ix])
} else {
print("empty list")
}
}
for (s in 1:length(p.learn)) {
l.iff <- c()
l.seq <- c()
for (i in 1:length(question_ids)) {
a <- irt.params$a1[which(irt.params$problem_id == question_ids[i])]
b <- irt.params$d[which(irt.params$problem_id == question_ids[i])]
c <- irt.params$g[which(irt.params$problem_id == question_ids[i])]
p <- bkt.predict(p.learn[s], p.guess = c)
if (p < 0.85) { # itens com mais de 85% de acertados não são parte da lista
iff <- (a^2)*((((p-c)^2)*(1-p))/(((1-c)^2)*p))
l.iff <- c(l.iff, iff)
l.seq <- c(l.seq, question_ids[i])
}
}
if (length(l.iff) > 0) {
l.iff <- sort(l.iff, index.return = T)
print(l.seq[l.iff$ix])
} else {
print("empty list")
}
}
library(readr)
source('bkt.R')
irt.params <- read_csv("irt-params.csv")
log <- read_csv("log.csv")
library(mirt)
library(readr)
library(readxl)
install.packages("readxl")
library(readr)
library(readxl)
library(mirt)
library(readr)
library(readxl)
dat <- read_xlsx("Classificacao_dos_itens.xlsx", sheet = "EF01MA06")
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
library(mirt)
library(readr)
library(readxl)
library(mirt)
library(readr)
library(readxl)
for (skill in c("EF01MA06","EF01MA08","EF02MA05","EF02MA06")) {
dat <- read_xlsx("Classificacao_dos_itens.xlsx", sheet = skill)
md <- mirt(dat, itemtype = '3PL')
irt.params <- as.data.frame(coef(md, simplify = T)$items) # parameters
write_csv(data.frame("problem_id"=row.names(irt.params), irt.params), paste0(skill,"-irt-params.csv"))
write_csv(data.frame("user_id"=paste0('s',1:nrow(dat)), F1= c(fscores(md))), paste0(skill,"-tetha.csv"))
}
pwd()
pdw()
